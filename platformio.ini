;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
; default_envs = build_RP2040
libdeps_dir = /tmp/libdeps

[env]
framework = arduino
build_flags =
  -D SMALL_GROUPOBJECT
  -D GARDENCONTROL
  -D MASK_VERSION=0x07B0
  ; use flash directly
  ;flash start at 1.5MiB
  -D KNX_FLASH_SIZE=0x4000
  -D KNX_FLASH_OFFSET=0x180000
  -D USERDATA_SAVE_SIZE=1004
  ;-D KNX_NO_PRINT
  ; use EEPROM emulation
  ; -D USE_SAMD_EEPROM_EMULATION
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  ;-D DEBUG_TIMING
  ;-D LOGIC_TRACE
  -Wno-unknown-pragmas
  -Wno-switch
  ; debug timing in knx stack
monitor_speed = 115200
monitor_port = COM29
lib_ldf_mode = deep+
lib_extra_dirs = 
  ..
; lib_deps =
; ;   Wire
; ;   SPI
debug_tool = jlink
debug_build_flags = -O0 -ggdb3
; build_type = debug
; debug_tool = atmel-ice

[RP2040]
platform = https://github.com/mumpf/platform-raspberrypi.git
board = pico
board_build.core = earlephilhower
; configure filesystem size. Default 0 Mbyte.
; board_build.filesystem_size = 1M
; inject core package.. not yet registered with PlatformIO
; registry, so pull working version directly from git / download page.
; note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases.
platform_packages =
    mumpf/framework-arduinopico@https://github.com/mumpf/arduino-pico.git
    maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-w64-mingw32.arm-none-eabi-9d55fd1.220202.zip
    ; maxgerhardt/framework-arduinopico@file://c:\users\d019748\platformio\arduino-pico
build_flags =
  ${env.build_flags}
  -D SERIAL_DEBUG=Serial
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  -frtti

[RP2040_develop]
build_flags =
  -D DEBUG_DELAY=10000

[env:build_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  ${RP2040_develop.build_flags}

[env:upload_USB_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = picotool

[env:upload_JLINK_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = jlink

[env:upload_ATMEL_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = atmel-ice

#### Release Environments
[env:release_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100

